#include<iostream>
using namespace std;
#include<algorithm>
#define MaxSize 1000000
typedef long long LL;
int n; //原木的数量
LL k; //需要得到的小段的数量 
LL BinarySearch(LL A[], LL k); //二分查找
LL Sum(LL A[], LL Length); //求长度为Length下得到的小段的数量
int main()
{
	cin >> n >> k;
	LL A[MaxSize] = { 0 };
	for (int i = 0; i < n; i++)
	{
		cin >> A[i];
	}
	sort(A, A + n); //从小到大排序
	LL Length;
	Length = BinarySearch(A, k);
	cout << Length;
	system("pause");
}
LL BinarySearch(LL A[], LL k)
{
	LL sum = 0;
	LL Length;
	LL Left, Right, Mid;
	Left = 0; Right = A[n - 1];
	while (Left < Right)
	{
		Mid = (Left + Right) / 2;
		if (Mid == 0)
		{
			break;
		}
		sum = Sum(A, Mid);
		if (sum < k) //长度偏大
		{
			Right = Mid;
		}
		else if (sum > k) //长度偏小
		{
			Left = Mid + 1;
		}
		else if (sum == k) //长度刚刚好
		{
			break;
		}
	}
	if (sum < k&&Mid>0)
	{
		return Mid - 1;
	}
	else
	{
		return Mid;
	}
}
LL Sum(LL A[], LL Length)
{
	LL Sum = 0;
	int pos = lower_bound(A, A + n, Length) - A;
	for (int i = pos ; i<n; i++)
	{
		Sum = Sum + A[i] / Length;
	}
	return Sum;
}

